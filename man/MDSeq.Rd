% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MDSeq.R
\name{MDSeq}
\alias{MDSeq}
\title{Differential mean and variability analysis with mean-dispersion GLMs.}
\usage{
MDSeq(count, X = NULL, U = NULL, contrast = list(mean = NULL, dispersion =
  NULL), initial.pars = list(beta = NULL, gamma = NULL), offsets = NULL,
  test.ZI = TRUE, ZI.alpha = 0.05, ZI = rep(TRUE, nrow(counts)),
  verbose = TRUE, mc.cores = 1, ...)
}
\arguments{
\item{count}{matrix of counts, each row containing expression values for one gene.}

\item{X}{vector or matrix contains covariates in the mean GLM.}

\item{U}{vector or matrix contains covariates in the dispersion GLM.}

\item{contrast}{list containing contrast for mean and dispersion.}

\item{initial.pars}{list giving initial values for parameters of mean and/or dispersion for each gene.}

\item{offsets}{numeric vector of same size as rows of counts giving offsets for use in log-linear models.}

\item{test.ZI}{whether test zero-inflation due to technical excess zeros.}

\item{ZI.alpha}{specific cutoff point indicating significance of zero-inflation.}

\item{ZI}{vector of logical values indicating zero-inflation for each gene. 
If True (defualt), the effect of zero-inflation will be considered. 
If ZI=False, the effect of zero-inflation will be ignored in computation.}

\item{verbose}{logical, if True, progress will be reported.}

\item{mc.cores}{integer equals to or greater than 1 (default), indicating how many cores 
will be used in computation. If mc.cores > 0, then parallel processes 
will be used, based on the 'parallel' package.}

\item{...}{other arguments could be passed in.}
}
\value{
a class 'ZIMD' object containing testing results and other information:
\item{Dat}{matrix containing testing results. See function 'glm.ZIMD'.}
\item{X}{covariate in the mean GLM.}
\item{U}{covariate in the dispersion GLM.}
\item{counts}{counts matrix of gene expression.}
\item{contrast}{list containing contrast matrix used in the model.}
\item{test.ZI}{if 1, zero-inflation will be tested using likelihood ratio test.}
\item{mc.cores}{how many cores were used in computation.}
\item{totalTime}{total time elapsed in computation.}
}
\description{
This is a parallel version of glm.ZIMD.
}
\examples{
library(MDSeq)
data(sampleData)

#expression
dat <- sample.exprs
dim(dat)

# covariates
X <- sample.pheno[,c("X1","X2")]
# group information
group <- sample.pheno$group

# lowly expressed gene filtered by mean cpm value across all samples
dat.filtered <- filter.counts(dat, mean.cpm.cutoff = 0.1) 
dim(dat.filtered)

# design matrix and constrast setting
group <- factor(sample.pheno$group, labels = c("Control", "Case"))
# make design matrix with proper contrast setting
groups <- get.model.matrix(group)

# normalization factor was calculated by using TMM method
# and used as an offset in mean-disperison GLM
# require(edgeR)
cnf <- calcNormFactors(dat.filtered, method="TMM") 
libsize <- colSums(dat.filtered)              #normalization factor
rellibsize <- libsize/exp(mean(log(libsize))) #relative library size
nf <- cnf * rellibsize                        #final normalization factor including library size

# check outliers using parallel process with 4 threads
# the first 100 genes are used as an example
dat.checked <- remove.outlier(dat.filtered[1:100,], X=X, U=X, contrast = groups,
                              offsets = nf, mc.cores = 4)

# status of outlier checking
table(dat.checked$outlier$status)

# frequency distribtuion of outliers
table(dat.checked$outlier$num.outliers)

# remove genes with status flag other than 0
counts <- dat.checked$count[dat.checked$outliers$status==0,]
dim(counts)

# differential analysis
# using parallel process with 4 threads
fit <- MDSeq(counts, X=X, U=X, contrast = groups, offsets = nf, mc.cores = 4)

# testing with a given log2-fold-change threshold tau
# Ha: |log2FC| > tau
# tau = 1 
result <- extract.ZIMD(fit, compare = list(A="Case", B="Control"), log2FC.threshold = 1)
head(result)

}
\seealso{
testing for single gene is done by glm.ZIMD.
}

